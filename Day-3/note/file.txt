NOTES DAY-3/  Express.js, MongoDB, JWT( 50% du text final)
Créer un API RESTFUL Via Express.js
JWT pour cripper le mot de passe
Middleware fait la sécurité du serveur
Postman permet de vérifier que les https (get, push, post, delete) fonctionnent correctement
1-Core Express.js Skills (Recap & Practice)
Setting Up MongoDB
*créer un dossier express-serveur dans exo
*entrer dans le dossier express-serveur et l’initialiser : npm init -y ; et installer mongoose : npm install mongoose
*installer Express: npm install express --save
*créer un nveau dossier db et à l’intérieur créer un fichier connectDB.js
*ouvrir le fichier connectDB.js et importer ce bout de code :
import mongoose from "mongoose";

mongoose
 .connect("mongodb://localhost:27017/<db_name>")
 .then(() => console.log("Connected"))
 .catch((err) => console.error("connection error: ",
err));
*créer un dossier models et un fichier User.js a l’intérieur
*ouvrir le fichier User.js et colle le code ci-dessous : 
import { Schema, model } from "mongoose";
const userSchema = new Schema({
  email: {
    type: String,
    require: true,
    unique: true,
 },
 password: String,
 isAdmin: {
   type: Boolean,
   default: false,
 },
 created_at: {
    type: Date,   
    default: Date.now,  
 },
}),
export const User =  model("User",userSchema);
*créer le dossier routes et le fichier auth.js et coller le contenu ci-dessous :
import express from "express";
import { register, login } from "../controllers/auth.js";

const router =  express.Router();

router.post("/register", register);
router.post("/login", login);
export default router;
*Créer le dossier controllers ( function callback bind to routes) et le fichier auth.js et coller le contenu ci-dessous :   on va checker a l’exam donc cherche la fonction
import crypto from "crypto";
import User from "../models/User.js";

export async function register(req, res) {
  const { email,password, isAdmin } = req.body;
 
  try {
    const userExist = await User.findOne({ email });
    if (userExist)
      return res.status(409).json({
        error: "User already exists",
      });

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = await User.create({
       email,
       password: hashedPassword,
      isAdmin,
    });
¬¬res.status(201).json({
        success: true,
        message: "User Registered",
        user: {
          email: newUser.email,
       },
     });
  } catch (err) {
    res.status(500).json({
      error: "Registration Failed",
   });
  }
}

export async function login(req, res) {
  const { email, password } = req.body;
*Créer un fichier server.js dans le dossier root( mon serveur donc express_server) et coller le contenu ci-dessous :
import express from "express";
import connectDB from "./db/connectDB.js";
import authRoutes from "./routes/auth.js";
//connect db
connectDB();
//init express
const app  =  express();
 //any middleware here     
//API routes
app.use("/api/v1/", authRoutes);
//any error handler here
const port  =  process.env.PORT || 5000; // .env PORT or Hard coded
app.listen(port, () =>  {
  console.log('Server running on port  ${port}'); 
});

Mettre une variable d’environnement : au niveau du superSecretkey
Afficher les utilisateurs ; être un admin :
